Metadata-Version: 2.1
Name: bcc-detection
Version: 0.1.0
Summary: A deep learning system for Basal Cell Carcinoma detection
Home-page: https://github.com/yourusername/bcc-detection
Author: Your Name
Author-email: your.email@example.com
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.21.0
Requires-Dist: tensorflow>=2.8.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: scikit-image>=0.19.0
Requires-Dist: opencv-python>=4.5.0
Requires-Dist: tifffile>=2021.11.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: matplotlib>=3.4.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: jupyter>=1.0.0
Requires-Dist: pytest>=6.2.0
Requires-Dist: black>=21.12b0
Requires-Dist: flake8>=4.0.0
Requires-Dist: mypy>=0.910

# Basal Cell Carcinoma (BCC) Detection System

A comprehensive deep learning system for automated detection of Basal Cell Carcinoma from high-resolution TIFF images.

## Project Structure

```
bcc-detection/
â”‚
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ raw/                   # Original TIFF images
â”‚   â”œâ”€â”€ processed/             # Preprocessed data
â”‚   â”‚   â”œâ”€â”€ segmented/         # Tissue-segmented images
â”‚   â”‚   â””â”€â”€ patches/           # Extracted patches (224Ã—224)
â”‚   â”œâ”€â”€ features/              # Extracted features
â”‚   â”‚   â”œâ”€â”€ deep/              # Features from EfficientNet-B7
â”‚   â”‚   â”œâ”€â”€ color/             # Color-based features
â”‚   â”‚   â””â”€â”€ combined/          # Combined feature vectors
â”‚   â”œâ”€â”€ predictions/
â”‚   â”‚   â”œâ”€â”€ patch_level/       # Patch classification results
â”‚   â”‚   â”œâ”€â”€ spatial/           # After spatial coherence enhancement
â”‚   â”‚   â””â”€â”€ slide_level/       # Final image-level predictions
â”‚   â””â”€â”€ visualizations/        # Generated heatmaps and visual outputs
â”‚
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ pretrained/            # Pretrained EfficientNet-B7 weights
â”‚   â”œâ”€â”€ checkpoints/           # Model checkpoints during training
â”‚   â””â”€â”€ final/                 # Final trained models
â”‚
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ preprocessing/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ tissue_segmentation.py  # Tissue segmentation module
â”‚   â”‚   â”œâ”€â”€ patch_extraction.py     # Patch extraction module
â”‚   â”‚   â””â”€â”€ utils.py                # Preprocessing utilities
â”‚   â”‚
â”‚   â”œâ”€â”€ feature_extraction/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ efficientnet.py         # EfficientNet-B7 implementation
â”‚   â”‚   â”œâ”€â”€ color_features.py       # Color feature extraction
â”‚   â”‚   â”œâ”€â”€ fcm_clustering.py       # Fuzzy C-Means clustering
â”‚   â”‚   â””â”€â”€ dimensionality.py       # PCA implementation
â”‚   â”‚
â”‚   â”œâ”€â”€ classification/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ model.py                # Classification model architecture
â”‚   â”‚   â”œâ”€â”€ training.py             # Training procedures
â”‚   â”‚   â””â”€â”€ inference.py            # Inference procedures
â”‚   â”‚
â”‚   â”œâ”€â”€ aggregation/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ patch_aggregation.py    # Patch-to-image aggregation
â”‚   â”‚   â”œâ”€â”€ spatial_coherence.py    # Spatial coherence enhancement
â”‚   â”‚   â””â”€â”€ confidence.py           # Confidence scoring
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚   â”‚   â”œâ”€â”€ data_handling.py        # Data loading/saving utilities
â”‚   â”‚   â”œâ”€â”€ visualization.py        # Visualization tools
â”‚   â”‚   â”œâ”€â”€ metrics.py              # Evaluation metrics
â”‚   â”‚   â””â”€â”€ optimization.py         # Performance optimization tools
â”‚   â”‚
â”‚   â””â”€â”€ config.py                   # Configuration parameters
â”‚
â”œâ”€â”€ notebooks/
â”‚   â”œâ”€â”€ 1_data_exploration.ipynb    # Data exploration and analysis
â”‚   â”œâ”€â”€ 2_model_development.ipynb   # Model development and testing
â”‚   â”œâ”€â”€ 3_performance_analysis.ipynb# Performance analysis
â”‚   â””â”€â”€ 4_case_studies.ipynb        # Case studies and examples
â”‚
â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ download_pretrained.py      # Download pretrained models
â”‚   â”œâ”€â”€ preprocess_dataset.py       # Preprocess all images
â”‚   â”œâ”€â”€ train_model.py              # Train the model
â”‚   â”œâ”€â”€ evaluate_model.py           # Evaluate model performance
â”‚   â””â”€â”€ predict.py                  # Run predictions on new images
â”‚
â”œâ”€â”€ tests/
â”‚   â”œâ”€â”€ test_preprocessing.py
â”‚   â”œâ”€â”€ test_feature_extraction.py
â”‚   â”œâ”€â”€ test_classification.py
â”‚   â””â”€â”€ test_aggregation.py
â”‚
â”œâ”€â”€ docs/
â”‚   â”œâ”€â”€ architecture.md             # System architecture documentation
â”‚   â”œâ”€â”€ usage.md                    # Usage instructions
â”‚   â””â”€â”€ api/                        # API documentation
â”‚
â”œâ”€â”€ requirements.txt                # Project dependencies
â””â”€â”€ setup.py                        # Package installation
```

## Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/bcc-detection.git
cd bcc-detection
```

2. Create a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

4. Install the package:
```bash
pip install -e .
```

## Usage

1. Preprocess the dataset:
```bash
python scripts/preprocess_dataset.py --input_dir data/raw --output_dir data/processed
```

2. Train the model:
```bash
python scripts/train_model.py --data_dir data/processed --model_dir models/final
```

3. Evaluate the model:
```bash
python scripts/evaluate_model.py --model_path models/final/best_model.h5 --data_dir data/processed
```

4. Make predictions:
```bash
python scripts/predict.py --model_path models/final/best_model.h5 --image_path path/to/image.tif
```

## Features

- Efficient processing of large TIFF images (250-600MB)
- Multi-stage detection pipeline:
  1. Preprocessing: Tissue segmentation and patch extraction
  2. Feature Extraction: EfficientNet-B7 and color features
  3. Classification: Patch-level BCC detection
  4. Aggregation: Image-level diagnosis
- Hyperparameter optimization with grid search and cross-validation
- Visualization tools for results interpretation
- Comprehensive evaluation metrics

## Contributing

1. Fork the repository
2. Create a feature branch
3. Commit your changes
4. Push to the branch
5. Create a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details. 
